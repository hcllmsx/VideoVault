<div class="video-wrapper">
    <div class="video-container">
        <video id="videoPlayer" 
               playsinline 
               controls 
               poster="<%= video.cover %>"
               data-plyr='<%= JSON.stringify(plyrConfig) %>'
               data-video='<%= JSON.stringify(video) %>'
               data-is-series='<%= JSON.stringify(isSeries) %>'>
            <% if (isSeries) { %>
                <% video.episodes[0].qualities.forEach(quality => { %>
                    <source src="<%= quality.url %>" type="video/mp4" size="<%= quality.height %>">
                <% }); %>
            <% } else { %>
                <% video.qualities.forEach(quality => { %>
                    <source src="<%= quality.url %>" type="video/mp4" size="<%= quality.height %>">
                <% }); %>
            <% } %>
            Your browser does not support the video tag.
        </video>
    </div>
</div>

<div class="video-content">
    <h1><%= video.title %></h1>
    <p><%= video.description %></p>
    
    <% if (isSeries) { %>
        <div class="episodes-list">
            <h2>分集列表</h2>
            <div class="episodes-grid">
                <% video.episodes.forEach((episode, index) => { %>
                    <div class="episode-item" data-episode-index="<%= index %>">
                        <div class="episode-cover">
                            <img src="<%= episode.cover %>" alt="<%= episode.title %>">
                        </div>
                        <div class="episode-info">
                            <h3><%= episode.title %></h3>
                            <p><%= episode.description %></p>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } %>
</div>

<style>
.episodes-list {
    margin-top: 2rem;
}

.episodes-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.episode-item {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.episode-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.episode-cover {
    position: relative;
    padding-top: 56.25%; /* 16:9 比例 */
    overflow: hidden;
}

.episode-cover img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.episode-info {
    padding: 1rem;
}

.episode-info h3 {
    margin: 0 0 0.5rem;
    font-size: 1.1rem;
}

.episode-info p {
    margin: 0;
    font-size: 0.9rem;
    color: var(--secondary-color);
}

/* 修复全屏模式样式 */
.plyr--fullscreen-fallback,
.plyr--fullscreen {
    background: #000 !important;
    height: 100% !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: hidden !important;
}

.plyr--fullscreen video,
.plyr--fullscreen-fallback video {
    height: 100% !important;
    width: 100% !important;
    object-fit: contain !important;
    max-width: none !important;
    max-height: none !important;
}

.plyr--fullscreen .plyr__video-wrapper,
.plyr--fullscreen-fallback .plyr__video-wrapper {
    height: 100% !important;
    width: 100% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
}

.plyr--fullscreen .plyr__control--overlaid,
.plyr--fullscreen-fallback .plyr__control--overlaid {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // 从data属性获取配置
    const videoElement = document.getElementById('videoPlayer');
    const plyrConfig = JSON.parse(videoElement.dataset.plyr || '{}');
    const videoData = JSON.parse(videoElement.dataset.video || '{}');
    const isSeries = JSON.parse(videoElement.dataset.isSeries || 'false');
    
    const player = new Plyr('#videoPlayer', plyrConfig);

    // 视频加载完成后调整大小
    function adjustVideoSize() {
        const video = document.getElementById('videoPlayer');
        const container = video.closest('.video-container');
        if (!video.videoWidth || !video.videoHeight) return;
        
        const maxWidth = Math.min(1280, window.innerWidth);
        const maxHeight = Math.min(720, window.innerHeight);
        const videoRatio = video.videoWidth / video.videoHeight;
        
        let width = video.videoWidth;
        let height = video.videoHeight;
        
        if (width > maxWidth) {
            width = maxWidth;
            height = width / videoRatio;
        }
        
        if (height > maxHeight) {
            height = maxHeight;
            width = height * videoRatio;
        }
        
        // 设置容器尺寸
        container.style.width = '100%';
        container.style.maxWidth = `${width}px`;
        container.style.height = 'auto';
        
        // 设置视频尺寸
        video.style.width = '100%';
        video.style.height = '100%';
        video.style.maxWidth = '100%';
        video.style.objectFit = 'contain';
        
        // 强制重绘
        player.resize();
    }

    // 视频加载和全屏状态变化时调整尺寸
    player.on('loadedmetadata', adjustVideoSize);
    player.on('enterfullscreen', () => {
        const video = player.media;
        video.style.width = '100%';
        video.style.height = '100%';
        video.style.maxWidth = 'none';
        video.style.maxHeight = 'none';
        video.style.objectFit = 'contain';
        player.resize();
    });
    player.on('exitfullscreen', adjustVideoSize);
    
    // 窗口大小改变时调整尺寸
    window.addEventListener('resize', () => {
        if (!player.fullscreen.active) {
            adjustVideoSize();
        }
    });
    
    // 初始化时如果视频已经加载完成则调整尺寸
    if (player.media.readyState >= 1) {
        adjustVideoSize();
    }

    // 处理分集切换
    if (isSeries) {
        const episodeItems = document.querySelectorAll('.episode-item');
        
        episodeItems.forEach((item, index) => {
            item.addEventListener('click', () => {
                const episode = videoData.episodes[index];
                const sources = episode.qualities.map(quality => 
                    `<source src="${quality.url}" type="video/mp4" size="${quality.height}">`
                ).join('');
                
                player.media.innerHTML = sources;
                player.source = {
                    type: 'video',
                    sources: episode.qualities.map(quality => ({
                        src: quality.url,
                        type: 'video/mp4',
                        size: quality.height
                    }))
                };
                
                // 切换视频时重置视频容器尺寸
                const videoElement = player.media;
                const container = videoElement.closest('.video-container');
                container.style.width = '100%';
                container.style.height = 'auto';
                videoElement.style.width = '100%';
                videoElement.style.height = '100%';
                videoElement.style.objectFit = 'contain';
                
                // 强制触发尺寸调整
                player.once('loadedmetadata', () => {
                    adjustVideoSize();
                    player.resize();
                });
                
                // 更新视频封面
                player.poster = episode.cover;
                
                // 更新标题和描述
                document.querySelector('.video-content h1').textContent = episode.title;
                document.querySelector('.video-content p').textContent = episode.description;
                
                // 播放新视频
                player.play();
            });
        });
    }
});
</script>